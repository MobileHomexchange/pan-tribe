rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    // Note: Requires Firebase Custom Claims to be set up
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.role == 'admin';
    }
    
    // Posts - users can create and edit their own posts
    // Anyone can increment likes/shares
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
                      (resource.data.userId == request.auth.uid ||
                       request.resource.data.keys().hasOnly(['likes', 'shares', 'comments']));
      allow delete: if request.auth != null && 
                      resource.data.userId == request.auth.uid;
    }
    
    // Comments - users can create their own comments
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && 
                              resource.data.userId == request.auth.uid;
    }
    
    // User interactions - users can only create/update their own interactions
    match /userInteractions/{interactionId} {
      allow read: if request.auth != null && 
                    resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
                      resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && 
                      resource.data.userId == request.auth.uid;
    }
    
    // Admin settings - only admins can write, authenticated users can read
    match /adminSettings/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Feed ads - only admins can manage
    match /feedAds/{adId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Reels ads - only admins can manage
    match /reelsAds/{adId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Tribes - users can read all, create their own, update their own
    match /tribes/{tribeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                      request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && 
                      resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null && 
                      resource.data.createdBy == request.auth.uid;
    }
    
    // Speak requests within tribes
    match /tribes/{tribeId}/speakRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
                      (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if request.auth != null && 
                      resource.data.userId == request.auth.uid;
    }
    
    // User profiles - users can read all, but only update their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                      userId == request.auth.uid;
      allow update: if request.auth != null && 
                      userId == request.auth.uid;
      allow delete: if request.auth != null && 
                      userId == request.auth.uid;
    }
  }
}
